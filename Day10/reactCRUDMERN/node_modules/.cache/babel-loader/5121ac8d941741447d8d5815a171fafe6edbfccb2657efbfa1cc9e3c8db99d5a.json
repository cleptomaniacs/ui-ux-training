{"ast":null,"code":"const Sorting = ({\n  key,\n  dir,\n  data\n}) => {\n  let lowerKey = key.toLowerCase();\n  let lowerDir = dir.toLowerCase();\n  //   console.log(lowerKey, lowerDir);\n  //   if (lowerKey === \"name\" && lowerDir === \"desc\") {\n  //     return data.sort((a, b) => {\n  //       let fa = a.name.toLowerCase();\n  //       let fb = b.name.toLowerCase();\n  //       if (fa < fb) return 1;\n  //       if (fa > fb) return -1;\n  //       return 0;\n  //     });\n  //   }\n  //   if (lowerKey === \"name\" && lowerDir === \"asc\") {\n  //     return data.sort((a, b) => {\n  //       let fa = a.name.toLowerCase();\n  //       let fb = b.name.toLowerCase();\n  //       if (fa > fb) return 1;\n  //       if (fa < fb) return -1;\n  //       return 0;\n  //     });\n  //   }\n  if (lowerDir === \"desc\") {\n    return sortDescending({\n      array: data,\n      key: lowerKey\n    });\n  }\n  if (lowerDir === \"asc\") {\n    return sortAscending({\n      array: data,\n      key: lowerKey\n    });\n  }\n  return data;\n};\n_c = Sorting;\nconst sortDescending = ({\n  array,\n  key\n}) => {\n  return array.sort((a, b) => {\n    // Check if the values are strings\n    if (typeof a[key] === \"string\" && typeof b[key] === \"string\") {\n      return b[key].localeCompare(a[key]); // Sort strings in descending order\n    } else {\n      // If values are not strings, assume they are numbers\n      return b[key] - a[key]; // Sort numbers in descending order\n    }\n  });\n};\n\nconst sortAscending = (array, key) => {\n  return array.sort((a, b) => {\n    // Check if the values are strings\n    if (typeof a[key] === \"string\" && typeof b[key] === \"string\") {\n      return a[key].localeCompare(b[key]); // Sort strings in ascending order\n    } else {\n      // If values are not strings, assume they are numbers\n      return a[key] - b[key]; // Sort numbers in ascending order\n    }\n  });\n};\n\nexport default Sorting;\nvar _c;\n$RefreshReg$(_c, \"Sorting\");","map":{"version":3,"names":["Sorting","key","dir","data","lowerKey","toLowerCase","lowerDir","sortDescending","array","sortAscending","_c","sort","a","b","localeCompare","$RefreshReg$"],"sources":["C:/Users/meshack.marwa/Desktop/SudakshaTraining/Day10/reactCRUDMERN/src/components/Sorting.js"],"sourcesContent":["const Sorting = ({ key, dir, data }) => {\r\n  let lowerKey = key.toLowerCase();\r\n  let lowerDir = dir.toLowerCase();\r\n  //   console.log(lowerKey, lowerDir);\r\n  //   if (lowerKey === \"name\" && lowerDir === \"desc\") {\r\n  //     return data.sort((a, b) => {\r\n  //       let fa = a.name.toLowerCase();\r\n  //       let fb = b.name.toLowerCase();\r\n  //       if (fa < fb) return 1;\r\n  //       if (fa > fb) return -1;\r\n  //       return 0;\r\n  //     });\r\n  //   }\r\n  //   if (lowerKey === \"name\" && lowerDir === \"asc\") {\r\n  //     return data.sort((a, b) => {\r\n  //       let fa = a.name.toLowerCase();\r\n  //       let fb = b.name.toLowerCase();\r\n  //       if (fa > fb) return 1;\r\n  //       if (fa < fb) return -1;\r\n  //       return 0;\r\n  //     });\r\n  //   }\r\n  if (lowerDir === \"desc\") {\r\n    return sortDescending({ array: data, key: lowerKey });\r\n  }\r\n  if (lowerDir === \"asc\") {\r\n    return sortAscending({ array: data, key: lowerKey });\r\n  }\r\n  return data;\r\n};\r\n\r\nconst sortDescending = ({ array, key }) => {\r\n  return array.sort((a, b) => {\r\n    // Check if the values are strings\r\n    if (typeof a[key] === \"string\" && typeof b[key] === \"string\") {\r\n      return b[key].localeCompare(a[key]); // Sort strings in descending order\r\n    } else {\r\n      // If values are not strings, assume they are numbers\r\n      return b[key] - a[key]; // Sort numbers in descending order\r\n    }\r\n  });\r\n};\r\n\r\nconst sortAscending = (array, key) => {\r\n  return array.sort((a, b) => {\r\n    // Check if the values are strings\r\n    if (typeof a[key] === \"string\" && typeof b[key] === \"string\") {\r\n      return a[key].localeCompare(b[key]); // Sort strings in ascending order\r\n    } else {\r\n      // If values are not strings, assume they are numbers\r\n      return a[key] - b[key]; // Sort numbers in ascending order\r\n    }\r\n  });\r\n};\r\n\r\nexport default Sorting;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGA,CAAC;EAAEC,GAAG;EAAEC,GAAG;EAAEC;AAAK,CAAC,KAAK;EACtC,IAAIC,QAAQ,GAAGH,GAAG,CAACI,WAAW,CAAC,CAAC;EAChC,IAAIC,QAAQ,GAAGJ,GAAG,CAACG,WAAW,CAAC,CAAC;EAChC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIC,QAAQ,KAAK,MAAM,EAAE;IACvB,OAAOC,cAAc,CAAC;MAAEC,KAAK,EAAEL,IAAI;MAAEF,GAAG,EAAEG;IAAS,CAAC,CAAC;EACvD;EACA,IAAIE,QAAQ,KAAK,KAAK,EAAE;IACtB,OAAOG,aAAa,CAAC;MAAED,KAAK,EAAEL,IAAI;MAAEF,GAAG,EAAEG;IAAS,CAAC,CAAC;EACtD;EACA,OAAOD,IAAI;AACb,CAAC;AAACO,EAAA,GA7BIV,OAAO;AA+Bb,MAAMO,cAAc,GAAGA,CAAC;EAAEC,KAAK;EAAEP;AAAI,CAAC,KAAK;EACzC,OAAOO,KAAK,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IAC1B;IACA,IAAI,OAAOD,CAAC,CAACX,GAAG,CAAC,KAAK,QAAQ,IAAI,OAAOY,CAAC,CAACZ,GAAG,CAAC,KAAK,QAAQ,EAAE;MAC5D,OAAOY,CAAC,CAACZ,GAAG,CAAC,CAACa,aAAa,CAACF,CAAC,CAACX,GAAG,CAAC,CAAC,CAAC,CAAC;IACvC,CAAC,MAAM;MACL;MACA,OAAOY,CAAC,CAACZ,GAAG,CAAC,GAAGW,CAAC,CAACX,GAAG,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC,CAAC;AACJ,CAAC;;AAED,MAAMQ,aAAa,GAAGA,CAACD,KAAK,EAAEP,GAAG,KAAK;EACpC,OAAOO,KAAK,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IAC1B;IACA,IAAI,OAAOD,CAAC,CAACX,GAAG,CAAC,KAAK,QAAQ,IAAI,OAAOY,CAAC,CAACZ,GAAG,CAAC,KAAK,QAAQ,EAAE;MAC5D,OAAOW,CAAC,CAACX,GAAG,CAAC,CAACa,aAAa,CAACD,CAAC,CAACZ,GAAG,CAAC,CAAC,CAAC,CAAC;IACvC,CAAC,MAAM;MACL;MACA,OAAOW,CAAC,CAACX,GAAG,CAAC,GAAGY,CAAC,CAACZ,GAAG,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC,CAAC;AACJ,CAAC;;AAED,eAAeD,OAAO;AAAC,IAAAU,EAAA;AAAAK,YAAA,CAAAL,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}