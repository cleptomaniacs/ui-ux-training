{"ast":null,"code":"const Sorting = ({\n  key,\n  dir,\n  data\n}) => {\n  let lowerKey = key.toLowerCase();\n  if (key === \"#\") {\n    lowerKey = \"_id\";\n  }\n  if (lowerKey === \"action\") {\n    return data;\n  }\n  if (dir) {\n    return sortDescending(data, lowerKey);\n  }\n  if (!dir) {\n    return sortAscending(data, lowerKey);\n  }\n  return data;\n};\n_c = Sorting;\nconst sortDescending = (array, key) => {\n  return array.sort((a, b) => {\n    // Check if the values are strings\n    if (typeof a[key] === \"string\" && typeof b[key] === \"string\") {\n      return b[key].localeCompare(a[key]); // Sort strings in descending order\n    } else {\n      // If values are not strings, assume they are numbers\n      return b[key] - a[key]; // Sort numbers in descending order\n    }\n  });\n};\n\nconst sortAscending = (array, key) => {\n  return array.sort((a, b) => {\n    // Check if the values are strings\n    if (typeof a[key] === \"string\" && typeof b[key] === \"string\") {\n      return a[key].localeCompare(b[key]); // Sort strings in ascending order\n    } else {\n      // If values are not strings, assume they are numbers\n      return a[key] - b[key]; // Sort numbers in ascending order\n    }\n  });\n};\n\nexport default Sorting;\nvar _c;\n$RefreshReg$(_c, \"Sorting\");","map":{"version":3,"names":["Sorting","key","dir","data","lowerKey","toLowerCase","sortDescending","sortAscending","_c","array","sort","a","b","localeCompare","$RefreshReg$"],"sources":["C:/Users/meshack.marwa/Desktop/SudakshaTraining/Day10/reactCRUDMERN/src/components/Sorting.js"],"sourcesContent":["const Sorting = ({ key, dir, data }) => {\r\n  let lowerKey = key.toLowerCase();\r\n  if (key === \"#\") {\r\n    lowerKey = \"_id\";\r\n  }\r\n  if (lowerKey === \"action\") {\r\n    return data;\r\n  }\r\n  if (dir) {\r\n    return sortDescending(data, lowerKey);\r\n  }\r\n  if (!dir) {\r\n    return sortAscending(data, lowerKey);\r\n  }\r\n  return data;\r\n};\r\n\r\nconst sortDescending = (array, key) => {\r\n  return array.sort((a, b) => {\r\n    // Check if the values are strings\r\n    if (typeof a[key] === \"string\" && typeof b[key] === \"string\") {\r\n      return b[key].localeCompare(a[key]); // Sort strings in descending order\r\n    } else {\r\n      // If values are not strings, assume they are numbers\r\n      return b[key] - a[key]; // Sort numbers in descending order\r\n    }\r\n  });\r\n};\r\n\r\nconst sortAscending = (array, key) => {\r\n  return array.sort((a, b) => {\r\n    // Check if the values are strings\r\n    if (typeof a[key] === \"string\" && typeof b[key] === \"string\") {\r\n      return a[key].localeCompare(b[key]); // Sort strings in ascending order\r\n    } else {\r\n      // If values are not strings, assume they are numbers\r\n      return a[key] - b[key]; // Sort numbers in ascending order\r\n    }\r\n  });\r\n};\r\n\r\nexport default Sorting;\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGA,CAAC;EAAEC,GAAG;EAAEC,GAAG;EAAEC;AAAK,CAAC,KAAK;EACtC,IAAIC,QAAQ,GAAGH,GAAG,CAACI,WAAW,CAAC,CAAC;EAChC,IAAIJ,GAAG,KAAK,GAAG,EAAE;IACfG,QAAQ,GAAG,KAAK;EAClB;EACA,IAAIA,QAAQ,KAAK,QAAQ,EAAE;IACzB,OAAOD,IAAI;EACb;EACA,IAAID,GAAG,EAAE;IACP,OAAOI,cAAc,CAACH,IAAI,EAAEC,QAAQ,CAAC;EACvC;EACA,IAAI,CAACF,GAAG,EAAE;IACR,OAAOK,aAAa,CAACJ,IAAI,EAAEC,QAAQ,CAAC;EACtC;EACA,OAAOD,IAAI;AACb,CAAC;AAACK,EAAA,GAfIR,OAAO;AAiBb,MAAMM,cAAc,GAAGA,CAACG,KAAK,EAAER,GAAG,KAAK;EACrC,OAAOQ,KAAK,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IAC1B;IACA,IAAI,OAAOD,CAAC,CAACV,GAAG,CAAC,KAAK,QAAQ,IAAI,OAAOW,CAAC,CAACX,GAAG,CAAC,KAAK,QAAQ,EAAE;MAC5D,OAAOW,CAAC,CAACX,GAAG,CAAC,CAACY,aAAa,CAACF,CAAC,CAACV,GAAG,CAAC,CAAC,CAAC,CAAC;IACvC,CAAC,MAAM;MACL;MACA,OAAOW,CAAC,CAACX,GAAG,CAAC,GAAGU,CAAC,CAACV,GAAG,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC,CAAC;AACJ,CAAC;;AAED,MAAMM,aAAa,GAAGA,CAACE,KAAK,EAAER,GAAG,KAAK;EACpC,OAAOQ,KAAK,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;IAC1B;IACA,IAAI,OAAOD,CAAC,CAACV,GAAG,CAAC,KAAK,QAAQ,IAAI,OAAOW,CAAC,CAACX,GAAG,CAAC,KAAK,QAAQ,EAAE;MAC5D,OAAOU,CAAC,CAACV,GAAG,CAAC,CAACY,aAAa,CAACD,CAAC,CAACX,GAAG,CAAC,CAAC,CAAC,CAAC;IACvC,CAAC,MAAM;MACL;MACA,OAAOU,CAAC,CAACV,GAAG,CAAC,GAAGW,CAAC,CAACX,GAAG,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC,CAAC;AACJ,CAAC;;AAED,eAAeD,OAAO;AAAC,IAAAQ,EAAA;AAAAM,YAAA,CAAAN,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}